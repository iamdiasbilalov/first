import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Table, Button, Modal, Form, Alert } from 'react-bootstrap';
import axios from 'axios';

const AdminPanel = () => {
  const [companies, setCompanies] = useState([]);
  const [departments, setDepartments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  
  // Company modal state
  const [showCompanyModal, setShowCompanyModal] = useState(false);
  const [newCompanyName, setNewCompanyName] = useState('');
  const [companyError, setCompanyError] = useState('');
  
  // Department modal state
  const [showDepartmentModal, setShowDepartmentModal] = useState(false);
  const [newDepartmentName, setNewDepartmentName] = useState('');
  const [departmentError, setDepartmentError] = useState('');

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    }
    
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      setLoading(true);
      const [companiesRes, departmentsRes] = await Promise.all([
        axios.get('/api/companies'),
        axios.get('/api/departments')
      ]);
      
      setCompanies(companiesRes.data);
      setDepartments(departmentsRes.data);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  // Company functions
  const handleAddCompany = async (e) => {
    e.preventDefault();
    
    if (!newCompanyName.trim()) {
      setCompanyError('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }

    if (companies.some(c => c.name.toLowerCase() === newCompanyName.toLowerCase())) {
      setCompanyError('–ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }

    try {
      await axios.post('/api/companies', { name: newCompanyName.trim() });
      setNewCompanyName('');
      setCompanyError('');
      setShowCompanyModal(false);
      fetchData();
    } catch (error) {
      setCompanyError(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏');
    }
  };

  const handleDeleteCompany = async (companyId, companyName) => {
    if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é "${companyName}"? –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.`)) {
      try {
        await axios.delete(`/api/companies/${companyId}`);
        fetchData();
      } catch (error) {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏');
        console.error('Error deleting company:', error);
      }
    }
  };

  // Department functions
  const handleAddDepartment = async (e) => {
    e.preventDefault();
    
    if (!newDepartmentName.trim()) {
      setDepartmentError('–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }

    if (departments.some(d => d.name.toLowerCase() === newDepartmentName.toLowerCase())) {
      setDepartmentError('–û—Ç–¥–µ–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }

    try {
      await axios.post('/api/departments', { name: newDepartmentName.trim() });
      setNewDepartmentName('');
      setDepartmentError('');
      setShowDepartmentModal(false);
      fetchData();
    } catch (error) {
      setDepartmentError(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞');
    }
  };

  const handleDeleteDepartment = async (departmentId, departmentName) => {
    if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª "${departmentName}"?`)) {
      try {
        await axios.delete(`/api/departments/${departmentId}`);
        fetchData();
      } catch (error) {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞');
        console.error('Error deleting department:', error);
      }
    }
  };

  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center" style={{ height: '80vh' }}>
        <div className="spinner-border" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  return (
    <Container className="py-4">
      {error && (
        <Alert variant="danger" onClose={() => setError('')} dismissible>
          {error}
        </Alert>
      )}

      <Row>
        <Col>
          <h1 className="mb-4">üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>
        </Col>
      </Row>

      <Row>
        {/* Companies Section */}
        <Col md={6}>
          <div className="admin-section">
            <div className="d-flex justify-content-between align-items-center mb-3">
              <h3>üè¢ –ö–æ–º–ø–∞–Ω–∏–∏</h3>
              <Button variant="primary" onClick={() => setShowCompanyModal(true)}>
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é
              </Button>
            </div>
            
            {companies.length === 0 ? (
              <p className="text-muted">–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π</p>
            ) : (
              <Table striped bordered hover responsive>
                <thead>
                  <tr>
                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                  </tr>
                </thead>
                <tbody>
                  {companies.map(company => (
                    <tr key={company.id}>
                      <td className="fw-bold">{company.name}</td>
                      <td>
                        <Button
                          variant="outline-danger"
                          size="sm"
                          onClick={() => handleDeleteCompany(company.id, company.name)}
                        >
                          üóëÔ∏è
                        </Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            )}
          </div>
        </Col>

        {/* Departments Section */}
        <Col md={6}>
          <div className="admin-section">
            <div className="d-flex justify-content-between align-items-center mb-3">
              <h3>üèõÔ∏è –û—Ç–¥–µ–ª—ã</h3>
              <Button variant="primary" onClick={() => setShowDepartmentModal(true)}>
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª
              </Button>
            </div>
            
            {departments.length === 0 ? (
              <p className="text-muted">–ù–µ—Ç –æ—Ç–¥–µ–ª–æ–≤</p>
            ) : (
              <Table striped bordered hover responsive>
                <thead>
                  <tr>
                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                  </tr>
                </thead>
                <tbody>
                  {departments.map(department => (
                    <tr key={department.id}>
                      <td className="fw-bold">{department.name}</td>
                      <td>
                        <Button
                          variant="outline-danger"
                          size="sm"
                          onClick={() => handleDeleteDepartment(department.id, department.name)}
                        >
                          üóëÔ∏è
                        </Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            )}
          </div>
        </Col>
      </Row>

      {/* Add Company Modal */}
      <Modal show={showCompanyModal} onHide={() => setShowCompanyModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form onSubmit={handleAddCompany}>
            {companyError && (
              <Alert variant="danger" className="mb-3">
                {companyError}
              </Alert>
            )}
            <Form.Group className="mb-3">
              <Form.Label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</Form.Label>
              <Form.Control
                type="text"
                value={newCompanyName}
                onChange={(e) => {
                  setNewCompanyName(e.target.value);
                  setCompanyError('');
                }}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
                autoFocus
              />
            </Form.Group>
            <div className="d-flex justify-content-end gap-2">
              <Button variant="secondary" onClick={() => setShowCompanyModal(false)}>
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button variant="primary" type="submit">
                –î–æ–±–∞–≤–∏—Ç—å
              </Button>
            </div>
          </Form>
        </Modal.Body>
      </Modal>

      {/* Add Department Modal */}
      <Modal show={showDepartmentModal} onHide={() => setShowDepartmentModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form onSubmit={handleAddDepartment}>
            {departmentError && (
              <Alert variant="danger" className="mb-3">
                {departmentError}
              </Alert>
            )}
            <Form.Group className="mb-3">
              <Form.Label>–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞</Form.Label>
              <Form.Control
                type="text"
                value={newDepartmentName}
                onChange={(e) => {
                  setNewDepartmentName(e.target.value);
                  setDepartmentError('');
                }}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞"
                autoFocus
              />
            </Form.Group>
            <div className="d-flex justify-content-end gap-2">
              <Button variant="secondary" onClick={() => setShowDepartmentModal(false)}>
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button variant="primary" type="submit">
                –î–æ–±–∞–≤–∏—Ç—å
              </Button>
            </div>
          </Form>
        </Modal.Body>
      </Modal>
    </Container>
  );
};

export default AdminPanel;

